{
module Lexer

open FSharp.Text.Lexing
open System
open Parser

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}
//  let newline = ('\n' | '\r' '\n')

let int = ['-' '+']? ['0'-'9']+
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule read = parse
  | whitespace  { read lexbuf }
  | newline     { newline lexbuf; read lexbuf }
  | int         { Parser.NUMERAL (int (lexeme lexbuf)) }
  | '+'         { Parser.PLUS }
  | '-'         { Parser.MINUS }
  | '*'         { Parser.TIMES }
  | '/'         { Parser.DIVIDE }
  | '('         { Parser.LPAREN }
  | ')'         { Parser.RPAREN }
  | eof         { Parser.EOF }
