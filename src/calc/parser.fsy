%{
%}

/* Lexemes */
%token <int> NUMERAL
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token UMINUS
%token LPAREN
%token RPAREN
%token EOF

/* Precedence and associativity */
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS

/* Top level rule */
%start toplevel
%type <Syntax.expression> toplevel

%%

/* Grammar */

toplevel: 
  | expression EOF { $1 }
;

expression:
  | NUMERAL                             { Syntax.Numeral $1 }
  | expression TIMES expression  { Syntax.Times ($1, $3) }
  | expression PLUS expression  { Syntax.Plus ($1, $3) }
  | expression MINUS expression  { Syntax.Minus ($1, $3) }
  | expression DIVIDE expression  { Syntax.Divide ($1, $3) }
  | MINUS expression %prec UMINUS       { Syntax.Negate $2 }
  | LPAREN expression RPAREN            { $2 }
;
